AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

  logs levels | numeric value
  ------------------------------
  CRITICAL    | 50
  ERROR       | 40
  WARNING     | 30
  INFO        | 20
  DEBUG       | 10
  NOTSET      | 0

Mappings:
  logLevel:
    dev:
      level: '10'
    test:
      level: '20'
    stage:
      level: '20'
    prod:
      level: '20'
  DynamoDb:
    dev:
      ddbLapTable: dashboard-test
    test:
      ddbLapTable: dashboard-test
    stage:
      ddbLapTable: cars-live-status
    prod:
      ddbLapTable: cars-live-status
Globals:
  Function:
    Timeout: 300
    Environment:
      Variables:
        apiGetAwayName: griiip_api
        logLevel: !FindInMap
          - logLevel
          - !Ref Env
          - level
        common_mappings: serverless.common.yml:custom
        griiip_api_url: !Ref griiipApiUrl
        griiip_api_key: !Ref apiGetAwayKey
        cache_ddb_table_name: !GetAtt cashTable.TableName
        cache_ddb_table_key: prefix_lap_id
        my_sql_host: !Ref MySqlHost
        my_sql_user: !Ref MySqlUser
        my_sql_pass: !Ref MySqlPass
        my_sql_db: !Ref MySqlSchma
        rds_connection_pull_size: !Ref RdsConnPoolSize
        Region: !Ref Region
        AccountId: !Ref AccountId
Resources:
  producer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackTagName}-producer-${EnvironmentTagName}
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: producer
      CodeUri: .
      AutoPublishAlias: !Ref Env
      Handler: src.producer.producer_lambda.lambda_handler
      Runtime: python3.7
      MemorySize: 3008
      Timeout: 300
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessLapsProducerToConsumer.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref cashTable
      Environment:
        Variables:
          logLevel: !FindInMap
            - logLevel
            - !Ref Env
            - level
          QUEUE_NAME: !GetAtt ProcessLapsProducerToConsumer.QueueName
          QUEUE_ARN: !GetAtt ProcessLapsProducerToConsumer.Arn
          QUEUE_URL: !Ref ProcessLapsProducerToConsumer
          TABLE_NAME: !Ref cashTable
          TABLE_ARN: !GetAtt cashTable.Arn
      Events:
        ProcessLapApiGatewayANYnewLap:
          Type: Api
          Properties:
            Path: /newLap
            Method: ANY
            RestApiId: !Ref ProcessLapApiGateway
  ProcessLapUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref ProcessLapApiGateway
          Stage: !Ref ProcessLapApiGateway.Stage
      Description: Use Plan for lambda base process lap
      UsagePlanName: !Sub ${StackTagName}-api-plan-${EnvironmentTagName}
  ProcessLapApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - ProcessLapUsagePlan
    Properties:
      Enabled: true
      Name: !Sub ${StackTagName}-api-key-${EnvironmentTagName}
      StageKeys:
        - RestApiId: !Ref ProcessLapApiGateway
          StageName: !Ref ProcessLapApiGateway.Stage
  processLapUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - ProcessLapApiKey
      - ProcessLapUsagePlan
    Properties:
      KeyId: !Ref ProcessLapApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ProcessLapUsagePlan
  ProcessLapApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${StackTagName}-api-${EnvironmentTagName}
      StageName: !Ref Env
      Cors: '''*'''
      Auth:
        ApiKeyRequired: true
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /newLap:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${producerAlias[object Object]}/invocations'
              responses: {}
          /sessionEnd:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sessionEndAlias[object Object]}/invocations'
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  ProcessLapsProducerToConsumer:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${StackTagName}-ProducerToConsumer-${EnvironmentTagName}
  sessionEnd:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackTagName}-sessionEnd-${EnvironmentTagName}
      AutoPublishAlias: !Ref Env
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: sessionEnd
      CodeUri: .
      Handler: src.sessionEnd.session_end_lambda.lambda_handler
      Runtime: python3.7
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessLapsProducerToConsumer.QueueName
      Events:
        ProcessLapApiGatewayANYsessionEnd:
          Type: Api
          Properties:
            Path: /sessionEnd
            Method: ANY
            RestApiId: !Ref ProcessLapApiGateway
      Environment:
        Variables:
          driverLapFiledsToQuery: 'lapStartDate, TrackId, lapName, CarId, UserId'
          driverLapsTable: driverlaps
          QUEUE_NAME: !GetAtt ProcessLapsProducerToConsumer.QueueName
          QUEUE_ARN: !GetAtt ProcessLapsProducerToConsumer.Arn
          QUEUE_URL: !Ref ProcessLapsProducerToConsumer
          logLevel: !FindInMap
            - logLevel
            - !Ref Env
            - level
  consumer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${StackTagName}-consumer-${EnvironmentTagName}
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: consumer
      CodeUri: .
      Handler: src.consumer.consumer_lambda.lambda_handler
      Runtime: python3.7
      MemorySize: 3008
      Timeout: 300
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - SQSPollerPolicy:
            QueueName: !GetAtt ProcessLapsProducerToConsumer.QueueName
        - Version: '1'
          Statement:
            - Sid: lambdaInvokeiton
              Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: '*'
      Environment:
        Variables:
          logLevel: !FindInMap
            - logLevel
            - !Ref Env
            - level
          MAX_ACC_PERCENT: 0.8
          FULL_LAP_FLOOR: 0.9
          FULL_LAP_CELL: 1.03
          PART_LAP_FLOOR: 0.1
          runDataRetrieveLimit: 5000
          runDataPaging: 1
          ddb_lap_table: !FindInMap [DynamoDb, !Ref Env, ddbLapTable]
          ddb_lap_table_key: lap_id
          year_prefix: 20
          kpi_num_of_points: 5
          KpiLambda: !Ref KpiLambda
      Events:
        ProcessLapsProducerToConsumer:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessLapsProducerToConsumer.Arn
            BatchSize: 1
  cashTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${StackTagName}-cashTable-${EnvironmentTagName}
      AttributeDefinitions:
        - AttributeName: 'prefix_lap_id '
          AttributeType: S
        - AttributeName: 'lap_number '
          AttributeType: S
      BillingMode: PROVISIONED
      KeySchema:
        - AttributeName: 'prefix_lap_id '
          KeyType: HASH
        - AttributeName: 'lap_number '
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
Parameters:
  griiipApiUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/griiipApiUrl
  apiGetAwayKey:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/apiGetAwayKey
  MySqlHost:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/MySqlHost
  MySqlUser:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/MySqlUser
  MySqlPass:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/MySqlPass
  MySqlSchma:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/MySqlSchma
  RdsConnPoolSize:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/RdsConnPoolSize
  KpiLambda:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/KpiLambda
  Env:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/Env
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  Region:
    Type: String
    Default: 'eu-central-1'
  AccountId:
    Type: String
    Default: '645717288378'